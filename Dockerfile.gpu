FROM nvidia/cuda:9.0-cudnn7-devel-ubuntu16.04

LABEL maintainer="Ivan Koryakovskiy <i.koryakovskiy@tudelft.nl>"

COPY keyboard /etc/default

# use tud mirrors for ubuntu
RUN sed -i 's|archive.ubuntu.com/ubuntu/|ftp.tudelft.nl/archive.ubuntu.com/|g' /etc/apt/sources.list

# Pick up dependencies
RUN apt-get update && apt-get install -y --no-install-recommends \
        build-essential \
        pkg-config \
        curl \
        nano \
        wget \
        unzip \
        xpra \
        swig \
        g++ \
        cmake \
        git \
        rsync \
        software-properties-common \
        libfreetype6-dev \
        libpng12-dev \
        libzmq3-dev \
        libpq-dev \
        libjpeg-dev \
        libboost-all-dev \
        libsdl2-dev \
        libav-tools \
        libeigen3-dev \
        libgl1-mesa-dev \
        freeglut3-dev \
        libz-dev \
        libqt4-opengl-dev \
        libtinyxml-dev \
        libmuparser-dev \
        libode-dev \
        liblua5.1-dev \
        libprotoc-dev \
        protobuf-compiler \
        python3 \
        python3-dev \
        python3-pip \
        python3-setuptools \
        ffmpeg \
        qtbase5-dev \
        libqt5opengl5-dev \
        libassimp-dev \
        libpython3.5-dev \
        libboost-python-dev \
        libtinyxml-dev \
     && \
        apt-get clean && \
        rm -rf /var/lib/apt/lists/*



#============================
# Tensorflow and OpenAI
#============================

# CPU Docker
#RUN wget https://github.com/lakshayg/tensorflow-build/raw/master/tensorflow-1.4.0-cp35-cp35m-linux_x86_64.whl
#RUN pip3 install --ignore-installed --upgrade tensorflow-1.4.0-cp35-cp35m-linux_x86_64.whl

# GPU Docker
RUN pip3 --no-cache-dir install wheel
RUN wget https://storage.googleapis.com/tensorflow/linux/gpu/tensorflow_gpu-1.5.0-cp35-cp35m-linux_x86_64.whl
RUN pip3 install --ignore-installed --upgrade tensorflow_gpu-1.5.0-cp35-cp35m-linux_x86_64.whl

#RUN pip3 --no-cache-dir install tensorflow-gpu

# Install OpenAI Gum
ADD https://api.github.com/repos/ikoryakovskiy/gym/git/refs/heads/master version.json
RUN git clone https://github.com/ikoryakovskiy/gym.git \
    && cd gym \
    && pip3 install -e .

RUN pip3 --no-cache-dir install \
        scipy \
        tqdm \
        joblib \
        zmq \
        dill \
        azure \
        progressbar2 \
        mpi4py \
        h5py \
        tflearn \
        pyyaml \
        pyopengl \
        cma

# Install OpenAI Baselines
ADD https://api.github.com/repos/ikoryakovskiy/baselines/git/refs/heads/master version.json
RUN git clone https://github.com/ikoryakovskiy/baselines.git \
    && cd baselines \
    && pip3 install -e .

# Install GRL wrapper
ADD https://api.github.com/repos/ikoryakovskiy/grlwrappers/git/refs/heads/master version.json
RUN git clone https://github.com/ikoryakovskiy/grlwrappers.git \
    && cd grlwrappers \
    && pip3 install -e .

# Install OpenAI Robotschool with Gym in the middle
ARG ROBOSCHOOL_PATH=/roboschool
ARG ROBOSCHOOL_REPO=https://github.com/ikoryakovskiy/roboschool.git
RUN git clone https://github.com/olegklimov/bullet3 -b roboschool_self_collision \
    && mkdir bullet3/build \
    && cd    bullet3/build \
    && cmake -DBUILD_SHARED_LIBS=ON -DUSE_DOUBLE_PRECISION=1 -DCMAKE_INSTALL_PREFIX:PATH=$ROBOSCHOOL_PATH/roboschool/cpp-household/bullet_local_install -DBUILD_CPU_DEMOS=OFF -DBUILD_BULLET2_DEMOS=OFF -DBUILD_EXTRAS=OFF  -DBUILD_UNIT_TESTS=OFF -DBUILD_CLSOCKET=OFF -DBUILD_ENET=OFF -DBUILD_OPENGL3_DEMOS=OFF .. \
    && make -j4 \
    && make install
ADD https://api.github.com/repos/ikoryakovskiy/roboschool/git/refs/heads/master version.json
RUN cd $ROBOSCHOOL_PATH \
    && git init \
    && git remote add origin $ROBOSCHOOL_REPO \
    && git fetch \
    && git checkout -t origin/master
RUN pip3 install -e $ROBOSCHOOL_PATH

# Entrypoint scripts
COPY entrypoint_nogui.sh /opt/bin/entrypoint.sh
RUN chmod +x /opt/bin/entrypoint.sh
EXPOSE 5900
ENTRYPOINT ["/opt/bin/entrypoint.sh"]

WORKDIR /drl
